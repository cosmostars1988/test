Задача: Разработать кроссплатформенное мобильное приложение "Beauty360" с использованием React Native. Приложение должно объединять функции AI‑анализа кожи, виртуальный макияж (AR), чат с ИИ косметологом и персонализированные рекомендации. Код должен быть детально прокомментирован, а каждый модуль – структурирован и легко масштабируем.

Этап 1. Подготовка окружения и инициализация проекта:
  - Установить Node.js, React Native CLI и настроить окружение для Android и iOS.
  - Инициализировать новый проект: `npx react-native init Beauty360`.
  - Настроить Git-репозиторий и CI/CD (например, GitHub Actions).

Этап 2. Организация структуры проекта:
  - Создать следующие директории:  
      /src/assets – изображения, иконки, файлы локализации;  
      /src/components – повторно используемые компоненты;  
      /src/views – экраны: Сканирование, Анализ, История, Новости, Профиль, AR, Чат, Планировщик;  
      /src/services – API для AI, платежей, Supabase, интеграции носимых устройств;  
      /src/store – управление состоянием (Redux/Context API или BLoC);  
      /src/navigation – навигация (React Navigation);  
      /src/utils – утилиты и константы;  
      /src/config – ключи API и настройки.

Этап 3. Реализация UI/UX:
  - **Главный экран:**  
      – Создать нижнюю навигационную панель с пятью основными разделами: Сканирование, Анализ, История, Новости, Профиль.  
      – Разместить дополнительные кнопки для доступа к AR (виртуальный макияж) и Чату с ИИ косметологом.  
      – Для премиум-функций (например, глубокий анализ, чат) сделать элементы неактивными с подсказкой «Доступно в подписке».
  - **Экран анализа кожи:**  
      – Реализовать макет с визуализацией результатов AI‑анализа: круговые диаграммы, линейные графики, цветовые индикаторы, иконки с пояснениями.  
      – Добавить интерактивные подсказки для каждого показателя.
  - **Экран сканирования лица:**  
      – Интегрировать React Native Camera для многоугольного сканирования лица с направляющими.
  - **Экран истории:**  
      – Реализовать галерею фото «до и после», построение динамических графиков и статистики.
  - **Экран новостной ленты:**  
      – Организовать отображение новостного контента, фильтруемого по возрасту, результатам сканирования, региону и рейтингу косметических средств.
  - **Экран профиля:**  
      – Добавить настройки профиля, локализации и управления подпиской.
  - **Экран AR‑виртуального макияжа:**  
      – Интегрировать ARKit (iOS) и ARCore (Android) для ре‑тайм примерки тонального крема, румян, теней, помад с выбором оттенков.  
      – Реализовать возможность сохранения «макияжных образов».
  - **Экран чата с ИИ косметологом:**  
      – Разработать дружелюбный чат-интерфейс с аватаром кошечки, поддержкой голосовых сообщений, прикрепления изображений и сохранения истории.  
      – Реализовать асинхронную обработку сообщений (рекомендуется использовать WebSocket для реального времени).

  - **Экран планировщика бьюти‑рутины:**  
      – Создать внутренний календарь с возможностью установки напоминаний и push‑уведомлениями.

  - **Экран сканера косметики:**  
      – Реализовать функционал считывания штрих‑/QR‑кодом.  
      – Интегрировать внешний API для анализа состава косметических средств, выявления аллергенов и получения отзывов.

Этап 4. Реализация функциональных модулей:
  - **Модуль сканирования и AI‑анализа кожи:**  
      • Разработать сервис для отправки изображений на сервер с использованием TensorFlow Lite или OpenAI API.  
      • Обработать и визуализировать данные с круговыми диаграммами, линейными графиками и интерактивными подсказками.
  - **Хранение истории и мониторинг:**  
      • Подключить Supabase для хранения профилей, истории сканирований, графиков и статистики.
  - **Интеграция с носимыми устройствами:**  
      • Создать сервисы для получения данных (пульс, качество сна, стресс, активность) для корреляции с состоянием кожи.
  - **Планировщик бьюти‑рутины:**  
      • Реализовать внутренний календарь с push‑уведомлениями для напоминаний.
  - **Модуль AR‑виртуального макияжа:**  
      • Интегрировать AR‑библиотеки для реализации ре‑тайм примерки косметики и сохранения образов.
  - **Сканер косметики:**  
      • Разработать функционал сканирования штрих‑/QR‑кодом и интегрировать внешний API для анализа состава и выявления аллергенов.
  - **Чат с ИИ косметологом:**  
      • Создать чат с поддержкой WebSocket для асинхронной обработки сообщений, отправки голосовых сообщений, прикрепления изображений и сохранения истории.
  - **Информационный контент и рекомендации:**  
      • Организовать новостную ленту с фильтрацией по возрасту, результатам сканирования, региону и рейтингу.  
      • Реализовать систему автоматических рекомендаций косметики с учетом отзывов сообщества.
  - **Платежная интеграция:**  
      • Создать экран подписки с описанием преимуществ Premium.  
      • Интегрировать мобильные SDK: Stripe, PayPal и YooKassa.  
      • Реализовать проверку статуса подписки и ограничение доступа к премиум-функциям (неактивные элементы с подсказкой «Доступно в подписке»).

Этап 5. Тестирование и предпросмотр:
  - Настроить эмуляторы для Android и iOS.
  - Написать модульные тесты для ключевых компонентов.
  - Настроить автоматические сборки через CI/CD.

Этап 6. Документация:
  - Добавить подробные комментарии к каждому модулю и функции.
  - Сгенерировать README.md с инструкциями по установке, сборке, запуску и тестированию.

Этап 7. Завершающие шаги:
  - Оптимизировать производительность и скорость отклика.
  - Провести финальное тестирование всех модулей.
  - Подготовить релиз для публикации в App Store и Google Play.
